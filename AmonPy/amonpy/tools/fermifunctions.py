# -*- coding: utf-8 -*-
from __future__ import division
import numpy as np
import healpy as hp
from scipy import interpolate

from itertools import combinations

from amonpy.tools.config import AMON_CONFIG as configs

import os

#dpath=configs.get('dirs','fermidata') #path to location of some critical fermi files
dpath=configs.get('dirs','amonpydir')

"""
    Rebuild of the FermiPSF.py code originally by Michael Toomey <mwt5345@psu.edu>
    This rebuild uses numpy arrays so the calculation can be
    carried out on an array of angles rather than one point at a time
    Last Author: C. F. Turley <cft114@psu.edu.
    Group: The Astrophysical Multimessenger Observatory Network
    Last Modifed: 7 August, 2018

    Aditional useful function also added for fermi-neutrino coincidence analyses
"""


# below we define six parameter arrays, gcore, gtail, ncore, ntail, score, stail
# each has a np.shape of (2,8,23)
# the first index (2) indicates a front (0) or back (1) conversion
# the second defines the binning of the inclination and has 8 entries
# the third index defines the energy binning and has 23 bins
# Values are taken from P8R2_SOURCE_V6

gcore=np.array([[
[1.001000E+00 ,1.001000E+00 ,1.040812E+00 ,1.001233E+00 ,1.001000E+00 ,2.068459E+00 ,2.553460E+00 ,2.344397E+00 ,2.000000E+01 ,1.722027E+00 ,1.836989E+00 ,1.829464E+00 ,8.823938E+00 ,1.582332E+00 ,1.703713E+00 ,1.600650E+00 ,1.617936E+00 ,1.630422E+00 ,1.610887E+00 ,1.759902E+00 ,7.535990E+00 ,2.179912E+00 ,5.993944E+00],
[1.001000E+00 ,1.004493E+00 ,1.003853E+00 ,2.418920E+00 ,2.429012E+00 ,2.630396E+00 ,2.591808E+00 ,2.542550E+00 ,2.196623E+00 ,2.158316E+00 ,2.083056E+00 ,2.542685E+00 ,1.950706E+00 ,2.010493E+00 ,1.920677E+00 ,1.766593E+00 ,1.765298E+00 ,1.876548E+00 ,1.915752E+00 ,2.317172E+00 ,5.264290E+00 ,6.238954E+00 ,1.999999E+01],
[1.001000E+00 ,3.658831E+00 ,2.805534E+00 ,2.422204E+00 ,2.496118E+00 ,2.737904E+00 ,2.657770E+00 ,2.552662E+00 ,2.272943E+00 ,2.259179E+00 ,2.380439E+00 ,2.949367E+00 ,2.416953E+00 ,2.205730E+00 ,1.945698E+00 ,1.977160E+00 ,2.319749E+00 ,2.041091E+00 ,2.101945E+00 ,2.579914E+00 ,4.752128E+00 ,8.454723E+00 ,2.000000E+01],
[6.584756E+00 ,5.755292E+00 ,3.700316E+00 ,2.857490E+00 ,2.689211E+00 ,2.831780E+00 ,2.721297E+00 ,2.570325E+00 ,2.343950E+00 ,2.445722E+00 ,2.721400E+00 ,3.146282E+00 ,2.856201E+00 ,2.638809E+00 ,2.229979E+00 ,2.312485E+00 ,2.466968E+00 ,2.330835E+00 ,2.191314E+00 ,2.320183E+00 ,3.100438E+00 ,5.235975E+00 ,1.916882E+01],
[9.659303E+00 ,3.382299E+00 ,2.563232E+00 ,2.760706E+00 ,2.958930E+00 ,2.905447E+00 ,2.724015E+00 ,2.530037E+00 ,2.489808E+00 ,2.779405E+00 ,3.443104E+00 ,3.176266E+00 ,3.525903E+00 ,3.146288E+00 ,2.625636E+00 ,2.567867E+00 ,2.958888E+00 ,2.607378E+00 ,2.372069E+00 ,2.417766E+00 ,2.948649E+00 ,4.087278E+00 ,6.815000E+00],
[3.505157E+00 ,3.438179E+00 ,3.107590E+00 ,2.909004E+00 ,3.131651E+00 ,2.865698E+00 ,2.661194E+00 ,2.502481E+00 ,2.395591E+00 ,3.133839E+00 ,3.145214E+00 ,3.148555E+00 ,3.349718E+00 ,3.683381E+00 ,3.010594E+00 ,2.684601E+00 ,2.819940E+00 ,2.606596E+00 ,2.398887E+00 ,2.479248E+00 ,2.681571E+00 ,3.252434E+00 ,4.387993E+00],
[4.738720E+00 ,3.789130E+00 ,3.163086E+00 ,3.304681E+00 ,3.064997E+00 ,2.839901E+00 ,2.603980E+00 ,2.465099E+00 ,2.483350E+00 ,3.850435E+00 ,3.634677E+00 ,3.599384E+00 ,4.206135E+00 ,3.456976E+00 ,3.173059E+00 ,2.851818E+00 ,3.459083E+00 ,3.210322E+00 ,3.144237E+00 ,3.224566E+00 ,3.743945E+00 ,4.526631E+00 ,6.892526E+00],
[5.983060E+00 ,4.121906E+00 ,3.646610E+00 ,3.359605E+00 ,2.924069E+00 ,2.714399E+00 ,2.526597E+00 ,2.353766E+00 ,2.500106E+00 ,3.373158E+00 ,3.132934E+00 ,3.498715E+00 ,4.156928E+00 ,3.564738E+00 ,2.908068E+00 ,2.625153E+00 ,2.760666E+00 ,2.768569E+00 ,2.852740E+00 ,3.119642E+00 ,3.684105E+00 ,3.958041E+00 ,6.089214E+00]
],[
[4.527813E+00 ,1.001000E+00 ,1.001000E+00 ,1.001190E+00 ,2.860795E+00 ,1.939263E+00 ,2.246196E+00 ,2.702320E+00 ,2.356385E+00 ,2.701599E+00 ,2.173849E+00 ,2.027665E+00 ,1.852972E+00 ,1.652865E+00 ,1.648865E+00 ,1.606795E+00 ,1.622627E+00 ,1.700525E+00 ,2.178493E+00 ,2.835619E+00 ,4.087420E+00 ,3.655106E+00 ,4.246407E+00],
[2.406082E+00 ,2.000000E+01 ,1.001000E+00 ,2.861425E+00 ,1.996145E+00 ,2.347932E+00 ,2.504771E+00 ,2.720575E+00 ,2.551265E+00 ,2.427257E+00 ,2.287686E+00 ,2.072529E+00 ,1.895033E+00 ,1.784881E+00 ,1.749459E+00 ,1.676891E+00 ,1.736600E+00 ,1.851786E+00 ,2.025336E+00 ,2.336603E+00 ,3.157591E+00 ,6.188441E+00 ,9.769161E+00],
[1.999648E+01 ,1.119407E+01 ,7.582800E+00 ,2.675773E+00 ,2.301153E+00 ,2.477796E+00 ,2.593904E+00 ,2.662639E+00 ,2.668563E+00 ,2.453003E+00 ,2.251423E+00 ,2.125720E+00 ,1.997129E+00 ,1.950922E+00 ,1.883792E+00 ,1.858840E+00 ,1.944702E+00 ,2.083327E+00 ,2.343683E+00 ,2.620062E+00 ,3.437236E+00 ,4.275254E+00 ,4.863514E+00],
[8.777492E+00 ,1.987344E+01 ,6.341587E+00 ,3.004096E+00 ,2.692652E+00 ,2.527050E+00 ,2.676648E+00 ,2.634930E+00 ,2.565730E+00 ,2.369782E+00 ,2.213355E+00 ,2.149151E+00 ,2.098137E+00 ,2.047694E+00 ,1.955773E+00 ,1.986291E+00 ,2.209130E+00 ,2.502432E+00 ,2.717736E+00 ,3.010228E+00 ,3.618464E+00 ,4.887712E+00 ,7.991074E+00],
[1.980143E+01 ,4.403293E+00 ,3.435547E+00 ,3.009433E+00 ,2.648449E+00 ,2.739570E+00 ,2.677387E+00 ,2.609132E+00 ,2.522151E+00 ,2.426991E+00 ,2.271619E+00 ,2.185075E+00 ,2.149441E+00 ,2.078010E+00 ,2.124801E+00 ,2.214683E+00 ,2.555602E+00 ,2.911172E+00 ,3.328485E+00 ,3.824617E+00 ,4.505616E+00 ,5.580913E+00 ,8.559574E+00],
[2.000000E+01 ,3.995901E+00 ,3.465941E+00 ,3.388069E+00 ,2.661771E+00 ,2.839860E+00 ,2.589163E+00 ,2.579019E+00 ,2.498473E+00 ,2.326870E+00 ,2.216989E+00 ,2.324764E+00 ,2.229078E+00 ,2.590263E+00 ,2.373314E+00 ,2.693819E+00 ,3.035874E+00 ,2.970039E+00 ,3.295964E+00 ,3.865858E+00 ,4.186539E+00 ,5.390968E+00 ,6.977890E+00],
[6.366591E+00 ,4.242719E+00 ,3.423583E+00 ,3.404174E+00 ,3.029278E+00 ,2.884694E+00 ,2.663688E+00 ,2.567861E+00 ,2.453305E+00 ,2.350209E+00 ,2.320874E+00 ,2.449300E+00 ,2.728767E+00 ,3.436221E+00 ,3.035109E+00 ,3.327326E+00 ,3.109918E+00 ,3.425361E+00 ,3.309546E+00 ,3.677454E+00 ,4.360157E+00 ,5.073300E+00 ,6.803785E+00],
[2.992528E+00 ,4.857174E+00 ,4.187023E+00 ,3.455287E+00 ,3.131085E+00 ,2.868576E+00 ,2.657025E+00 ,2.527934E+00 ,2.406669E+00 ,2.532488E+00 ,2.381610E+00 ,2.378451E+00 ,2.489427E+00 ,3.121086E+00 ,3.089632E+00 ,3.265353E+00 ,3.190097E+00 ,3.131634E+00 ,3.109084E+00 ,3.088801E+00 ,3.486152E+00 ,4.106702E+00 ,5.239408E+00]
]])

gtail=np.array([[
[2.000000E+01 ,1.180819E+01 ,2.000000E+01 ,3.715768E+00 ,2.787073E+00 ,4.236510E+00 ,2.645309E+00 ,2.898539E+00 ,2.131195E+00 ,5.813284E+00 ,3.383515E+00 ,2.955388E+00 ,1.986254E+00 ,8.247925E+00 ,2.384632E+00 ,2.000000E+01 ,2.000000E+01 ,3.367078E+00 ,3.496905E+00 ,2.432606E+00 ,1.672422E+00 ,1.627144E+00 ,1.225045E+00],
[2.000000E+01 ,8.731774E+00 ,1.012246E+01 ,5.875507E+00 ,2.000000E+01 ,2.954716E+00 ,3.041485E+00 ,2.919486E+00 ,2.838850E+00 ,2.596576E+00 ,2.535368E+00 ,2.639789E+00 ,4.351355E+00 ,4.030613E+00 ,3.979549E+00 ,3.319686E+00 ,2.751500E+00 ,2.927461E+00 ,2.443345E+00 ,2.226346E+00 ,1.750296E+00 ,1.820779E+00 ,1.545200E+00],
[6.780368E+00 ,2.000000E+01 ,1.999987E+01 ,2.946408E+00 ,4.385835E+00 ,3.146713E+00 ,3.223631E+00 ,2.896314E+00 ,2.636480E+00 ,2.685968E+00 ,2.635053E+00 ,2.543831E+00 ,3.693228E+00 ,3.113233E+00 ,3.175372E+00 ,2.635974E+00 ,2.230531E+00 ,2.497405E+00 ,2.459276E+00 ,2.307009E+00 ,2.025981E+00 ,1.999663E+00 ,1.891301E+00],
[2.000000E+01 ,2.000000E+01 ,3.684146E+00 ,5.051384E+00 ,4.027074E+00 ,3.174311E+00 ,3.145598E+00 ,2.936104E+00 ,2.675633E+00 ,2.780119E+00 ,2.702059E+00 ,2.725073E+00 ,2.630700E+00 ,2.484955E+00 ,2.505130E+00 ,2.380413E+00 ,2.241059E+00 ,2.381840E+00 ,2.407556E+00 ,2.444205E+00 ,2.373299E+00 ,2.265860E+00 ,2.086912E+00],
[2.000000E+01 ,4.185377E+00 ,3.975868E+00 ,3.872118E+00 ,3.456136E+00 ,3.177312E+00 ,3.068137E+00 ,2.907183E+00 ,2.778956E+00 ,2.669052E+00 ,2.534290E+00 ,2.649035E+00 ,2.324210E+00 ,2.357014E+00 ,2.371372E+00 ,2.284956E+00 ,2.151851E+00 ,2.330401E+00 ,2.452532E+00 ,2.532415E+00 ,2.484638E+00 ,2.460568E+00 ,2.364367E+00],
[5.242873E+00 ,4.378520E+00 ,3.843123E+00 ,4.507593E+00 ,3.504507E+00 ,3.284431E+00 ,3.084642E+00 ,2.894694E+00 ,2.931150E+00 ,2.720624E+00 ,2.633270E+00 ,2.649960E+00 ,2.340579E+00 ,2.206403E+00 ,2.222818E+00 ,2.243226E+00 ,2.268034E+00 ,2.388108E+00 ,2.532230E+00 ,2.524761E+00 ,2.566706E+00 ,2.615546E+00 ,2.549194E+00],
[6.136152E+00 ,5.256808E+00 ,5.457747E+00 ,3.531740E+00 ,3.290833E+00 ,3.139004E+00 ,2.979042E+00 ,2.921966E+00 ,2.769910E+00 ,2.651850E+00 ,2.514632E+00 ,2.362513E+00 ,2.180958E+00 ,2.319908E+00 ,2.214693E+00 ,2.235544E+00 ,2.210422E+00 ,2.308452E+00 ,2.393607E+00 ,2.466817E+00 ,2.401245E+00 ,2.462385E+00 ,2.314714E+00],
[1.001367E+00 ,6.445241E+00 ,4.684000E+00 ,3.537489E+00 ,3.048789E+00 ,2.906797E+00 ,2.871073E+00 ,2.950267E+00 ,2.883808E+00 ,2.482229E+00 ,2.493720E+00 ,2.349582E+00 ,2.126614E+00 ,2.136211E+00 ,2.208715E+00 ,2.319884E+00 ,2.364840E+00 ,2.477158E+00 ,2.595013E+00 ,2.608845E+00 ,2.650958E+00 ,2.795063E+00 ,2.466994E+00]
],[
[2.000000E+01 ,2.000000E+01 ,2.000000E+01 ,6.368850E+00 ,2.860729E+00 ,4.543271E+00 ,3.755877E+00 ,3.279767E+00 ,7.113705E+00 ,3.177778E+00 ,4.161655E+00 ,4.232287E+00 ,5.283142E+00 ,8.487987E+00 ,1.588188E+01 ,7.370657E+00 ,1.360176E+01 ,8.356809E+00 ,3.452357E+00 ,2.858799E+00 ,2.003957E+00 ,1.659915E+00 ,1.557187E+00],
[1.869546E+01 ,1.999152E+01 ,2.000000E+01 ,3.778837E+00 ,4.225358E+00 ,3.694094E+00 ,3.523868E+00 ,3.450746E+00 ,3.906322E+00 ,3.303317E+00 ,3.849253E+00 ,4.153584E+00 ,5.791551E+00 ,8.600013E+00 ,1.033313E+01 ,7.639984E+00 ,6.751215E+00 ,5.682383E+00 ,3.700389E+00 ,3.390749E+00 ,2.723633E+00 ,2.081795E+00 ,1.726610E+00],
[2.294620E+00 ,2.000000E+01 ,1.999998E+01 ,3.628959E+00 ,3.468107E+00 ,3.886312E+00 ,3.816097E+00 ,3.590132E+00 ,3.258446E+00 ,3.473991E+00 ,3.329836E+00 ,3.526972E+00 ,5.337597E+00 ,6.410883E+00 ,5.492097E+00 ,4.447824E+00 ,3.573437E+00 ,3.567829E+00 ,3.101936E+00 ,3.016246E+00 ,2.607002E+00 ,2.594963E+00 ,2.299175E+00],
[1.402071E+01 ,2.000000E+01 ,5.408348E+00 ,4.094648E+00 ,3.677022E+00 ,4.219908E+00 ,3.608067E+00 ,3.474260E+00 ,3.601348E+00 ,3.289951E+00 ,3.393986E+00 ,3.614449E+00 ,5.310975E+00 ,5.168491E+00 ,3.984329E+00 ,3.228172E+00 ,3.355470E+00 ,3.046844E+00 ,3.033834E+00 ,2.953851E+00 ,2.877007E+00 ,2.448263E+00 ,2.256476E+00],
[3.908740E+00 ,1.139963E+01 ,7.336733E+00 ,3.863895E+00 ,3.965149E+00 ,3.711851E+00 ,3.544395E+00 ,3.395811E+00 ,3.303526E+00 ,3.363559E+00 ,3.677866E+00 ,4.101413E+00 ,5.154155E+00 ,4.437843E+00 ,3.007282E+00 ,2.712087E+00 ,2.609931E+00 ,2.622032E+00 ,2.684013E+00 ,2.690884E+00 ,2.675328E+00 ,2.594180E+00 ,2.710181E+00],
[2.000000E+01 ,1.059228E+01 ,6.130628E+00 ,4.382749E+00 ,4.162491E+00 ,3.677186E+00 ,3.554916E+00 ,3.293263E+00 ,3.207851E+00 ,3.140767E+00 ,4.026037E+00 ,3.589932E+00 ,3.702414E+00 ,2.854735E+00 ,2.606543E+00 ,2.479671E+00 ,2.585399E+00 ,2.708383E+00 ,2.675311E+00 ,2.656409E+00 ,2.799592E+00 ,2.749314E+00 ,2.873012E+00],
[2.000000E+01 ,8.426998E+00 ,5.080832E+00 ,4.797963E+00 ,3.919166E+00 ,3.556828E+00 ,3.331079E+00 ,3.235905E+00 ,3.166654E+00 ,4.051634E+00 ,3.270963E+00 ,3.551824E+00 ,2.766976E+00 ,2.399961E+00 ,2.336791E+00 ,2.284729E+00 ,2.422137E+00 ,2.506017E+00 ,2.608176E+00 ,2.621125E+00 ,2.700636E+00 ,2.629005E+00 ,2.264795E+00],
[4.196121E+00 ,1.023214E+01 ,7.703460E+00 ,4.855822E+00 ,3.972881E+00 ,3.398112E+00 ,3.210376E+00 ,3.078853E+00 ,3.120364E+00 ,3.200241E+00 ,3.357931E+00 ,3.233665E+00 ,2.956679E+00 ,2.418177E+00 ,2.263850E+00 ,2.397163E+00 ,2.491939E+00 ,2.551497E+00 ,2.710571E+00 ,2.756638E+00 ,2.842144E+00 ,2.686594E+00 ,2.652919E+00]
]])

ncore=np.array([[
[3.014256E-02 ,2.164819E-02 ,1.782976E-02 ,9.596296E-02 ,8.713235E-02 ,8.549453E-02 ,9.992594E-02 ,1.371854E-01 ,5.427407E-02 ,1.705849E-01 ,1.704818E-01 ,1.983623E-01 ,1.100599E-01 ,2.804334E-01 ,3.667357E-01 ,4.574438E-01 ,5.149882E-01 ,6.615041E-01 ,8.097832E-01 ,1.000000E+00 ,4.729967E-01 ,9.999999E-01 ,1.000000E+00],
[4.227862E-02 ,4.112783E-02 ,1.888968E-01 ,3.762935E-02 ,1.408538E-01 ,1.540222E-01 ,1.942237E-01 ,2.147560E-01 ,2.542909E-01 ,3.122986E-01 ,3.705258E-01 ,3.284285E-01 ,4.595803E-01 ,4.931459E-01 ,6.204480E-01 ,8.412266E-01 ,9.508868E-01 ,8.460190E-01 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00],
[7.629424E-02 ,3.867482E-02 ,1.054578E-01 ,9.834017E-02 ,2.127985E-01 ,2.068546E-01 ,2.508887E-01 ,2.936045E-01 ,3.873735E-01 ,4.741293E-01 ,4.830210E-01 ,4.203635E-01 ,4.972247E-01 ,6.024662E-01 ,8.411499E-01 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00],
[5.899199E-02 ,1.289083E-01 ,1.346865E-01 ,2.364277E-01 ,2.666690E-01 ,2.417480E-01 ,2.999744E-01 ,3.751644E-01 ,5.016249E-01 ,5.437210E-01 ,5.133028E-01 ,4.456185E-01 ,4.878614E-01 ,5.790516E-01 ,8.533398E-01 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00],
[1.525369E-01 ,1.273079E-01 ,1.422601E-01 ,2.388111E-01 ,2.658317E-01 ,2.910367E-01 ,3.590923E-01 ,4.669620E-01 ,5.674574E-01 ,5.692307E-01 ,4.843571E-01 ,4.780951E-01 ,4.572785E-01 ,5.484701E-01 ,7.948470E-01 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00],
[1.594566E-01 ,1.502928E-01 ,1.608905E-01 ,2.913434E-01 ,2.864161E-01 ,3.549497E-01 ,4.373492E-01 ,5.532693E-01 ,6.701958E-01 ,5.749303E-01 ,5.328213E-01 ,5.002304E-01 ,4.814402E-01 ,5.187012E-01 ,7.252708E-01 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00],
[1.937019E-01 ,1.497670E-01 ,2.456841E-01 ,2.351923E-01 ,3.286635E-01 ,4.099988E-01 ,5.155547E-01 ,6.457226E-01 ,7.186024E-01 ,5.273970E-01 ,4.934281E-01 ,4.625517E-01 ,4.235163E-01 ,5.417647E-01 ,7.154574E-01 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00],
[3.328143E-01 ,1.498229E-01 ,2.330642E-01 ,2.930361E-01 ,4.034770E-01 ,5.057301E-01 ,6.345019E-01 ,7.860735E-01 ,7.929865E-01 ,6.090745E-01 ,5.815905E-01 ,5.045053E-01 ,4.569947E-01 ,5.491601E-01 ,7.647310E-01 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00]
],[
[9.999998E-01 ,2.865612E-02 ,2.558479E-02 ,1.157590E-01 ,5.189470E-02 ,2.045886E-01 ,2.070681E-01 ,1.663775E-01 ,1.679110E-01 ,1.173263E-01 ,1.409714E-01 ,1.644579E-01 ,2.629884E-01 ,4.146151E-01 ,6.200176E-01 ,8.423715E-01 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00],
[1.000000E+00 ,5.027452E-02 ,3.846801E-02 ,5.652842E-02 ,2.603673E-01 ,2.698261E-01 ,2.480150E-01 ,2.104478E-01 ,2.181281E-01 ,2.411075E-01 ,2.771306E-01 ,3.521239E-01 ,4.500812E-01 ,5.085188E-01 ,6.480443E-01 ,8.172563E-01 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00],
[9.769606E-01 ,4.880719E-02 ,3.643201E-02 ,2.155796E-01 ,3.296464E-01 ,2.994895E-01 ,2.942524E-01 ,2.816608E-01 ,3.161370E-01 ,3.904685E-01 ,4.891648E-01 ,5.429924E-01 ,6.005095E-01 ,6.201867E-01 ,7.511762E-01 ,9.236324E-01 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00],
[6.663681E-01 ,1.372917E-01 ,1.028712E-01 ,3.022071E-01 ,3.362913E-01 ,3.554888E-01 ,3.317560E-01 ,3.696328E-01 ,4.535973E-01 ,5.906775E-01 ,6.889977E-01 ,7.213213E-01 ,7.235202E-01 ,7.619072E-01 ,8.492454E-01 ,9.938234E-01 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00],
[1.080991E-01 ,3.540828E-01 ,3.249050E-01 ,3.391326E-01 ,3.737064E-01 ,3.512725E-01 ,3.957517E-01 ,4.728010E-01 ,5.946776E-01 ,7.381013E-01 ,8.067992E-01 ,8.194020E-01 ,8.064784E-01 ,8.457382E-01 ,8.814812E-01 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00],
[3.175100E-01 ,5.958651E-01 ,4.241691E-01 ,3.556560E-01 ,4.056205E-01 ,3.876521E-01 ,4.877761E-01 ,5.908471E-01 ,7.443967E-01 ,9.078469E-01 ,9.351768E-01 ,8.464724E-01 ,8.431681E-01 ,7.217902E-01 ,8.289599E-01 ,8.526424E-01 ,8.761034E-01 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00],
[7.451578E-01 ,6.671154E-01 ,4.568743E-01 ,4.050969E-01 ,3.938564E-01 ,4.281971E-01 ,5.463473E-01 ,6.992744E-01 ,8.872691E-01 ,9.864009E-01 ,1.000000E+00 ,8.688651E-01 ,7.190491E-01 ,6.180316E-01 ,6.907302E-01 ,7.293607E-01 ,8.599927E-01 ,8.954498E-01 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00],
[6.621063E-01 ,6.213033E-01 ,4.877539E-01 ,4.050036E-01 ,4.231400E-01 ,4.804327E-01 ,6.433054E-01 ,8.305009E-01 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,9.125307E-01 ,7.908579E-01 ,6.294984E-01 ,6.404613E-01 ,6.813334E-01 ,7.555336E-01 ,8.433400E-01 ,9.235698E-01 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00 ,1.000000E+00]
]])

ntail=np.array([[
[9.514917E-01 ,7.487273E-01 ,9.999999E-01 ,2.761055E-01 ,5.003704E-01 ,1.049957E-01 ,1.966817E-01 ,5.457298E-02 ,8.319517E-01 ,2.582448E-02 ,2.662845E-02 ,1.250785E-02 ,1.656480E-01 ,1.698620E-03 ,8.974141E-03 ,2.136928E-03 ,1.871980E-03 ,6.234820E-03 ,5.082776E-03 ,8.003630E-03 ,3.883949E-01 ,9.054039E-03 ,9.999998E-01],
[9.425178E-01 ,9.243535E-01 ,2.138266E-01 ,1.000000E+00 ,3.908110E-02 ,2.302680E-01 ,8.940324E-02 ,6.416404E-02 ,3.581254E-02 ,3.920234E-02 ,1.754800E-02 ,2.124059E-02 ,2.806999E-03 ,2.579083E-03 ,3.052695E-03 ,3.295430E-03 ,6.911989E-03 ,1.042495E-02 ,1.779472E-02 ,3.349221E-02 ,2.993818E-01 ,1.573525E-01 ,9.826451E-01],
[9.999998E-01 ,1.000000E+00 ,1.462866E-01 ,9.747636E-01 ,1.040403E-01 ,2.041903E-01 ,8.285641E-02 ,7.547010E-02 ,5.275152E-02 ,2.206737E-02 ,1.432812E-02 ,1.673370E-02 ,3.453943E-03 ,2.369330E-03 ,2.072606E-03 ,6.766760E-03 ,3.081752E-02 ,2.111786E-02 ,3.191858E-02 ,4.901351E-02 ,1.520156E-01 ,1.912703E-01 ,2.628142E-01],
[1.000000E+00 ,9.338878E-03 ,4.427294E-01 ,3.994581E-02 ,7.392292E-02 ,2.529288E-01 ,1.128992E-01 ,6.957135E-02 ,4.558531E-02 ,2.299025E-02 ,1.412728E-02 ,1.141895E-02 ,6.620292E-03 ,6.926174E-03 ,5.670040E-03 ,1.427031E-02 ,3.369163E-02 ,4.201635E-02 ,4.720909E-02 ,5.301330E-02 ,8.417258E-02 ,1.161848E-01 ,1.948077E-01],
[9.340730E-02 ,8.668042E-01 ,9.971345E-01 ,2.545969E-01 ,1.956154E-01 ,2.052845E-01 ,1.080020E-01 ,6.187890E-02 ,4.273424E-02 ,2.668272E-02 ,2.802677E-02 ,1.030625E-02 ,1.894765E-02 ,1.396486E-02 ,1.073682E-02 ,2.204687E-02 ,5.666837E-02 ,5.356636E-02 ,5.370437E-02 ,5.906474E-02 ,7.960590E-02 ,9.138428E-02 ,1.084825E-01],
[1.000000E+00 ,9.870250E-01 ,9.040336E-01 ,1.160439E-01 ,2.117380E-01 ,1.209959E-01 ,7.720016E-02 ,4.888374E-02 ,2.288103E-02 ,2.928770E-02 ,1.635669E-02 ,1.085069E-02 ,1.744256E-02 ,3.008795E-02 ,2.111623E-02 ,2.760313E-02 ,4.630180E-02 ,5.037440E-02 ,5.033073E-02 ,6.068320E-02 ,6.913006E-02 ,7.059168E-02 ,9.030742E-02],
[7.902681E-01 ,9.997290E-01 ,3.294651E-01 ,4.983039E-01 ,2.070180E-01 ,1.212473E-01 ,6.708422E-02 ,3.558626E-02 ,2.005642E-02 ,4.446217E-02 ,2.514357E-02 ,2.150445E-02 ,4.164100E-02 ,1.973285E-02 ,2.185382E-02 ,2.435445E-02 ,5.693252E-02 ,5.891263E-02 ,6.497134E-02 ,7.070934E-02 ,8.792056E-02 ,9.793817E-02 ,1.391632E-01],
[1.373648E-06 ,9.999909E-01 ,4.718604E-01 ,3.535702E-01 ,1.543958E-01 ,8.162649E-02 ,3.611028E-02 ,1.465752E-02 ,1.106973E-02 ,3.131314E-02 ,1.673778E-02 ,2.378258E-02 ,6.241717E-02 ,3.777635E-02 ,2.008661E-02 ,1.962934E-02 ,3.297961E-02 ,3.957582E-02 ,4.422513E-02 ,5.090139E-02 ,5.829672E-02 ,5.505468E-02 ,8.866484E-02]
],[
[7.598966E-02 ,9.999374E-01 ,8.745398E-01 ,2.541654E-01 ,6.056139E-01 ,2.276851E-01 ,2.197073E-01 ,2.473864E-01 ,4.390029E-02 ,2.467224E-01 ,6.918041E-02 ,5.149872E-02 ,3.172254E-02 ,1.856746E-02 ,9.042685E-03 ,9.091910E-03 ,7.191417E-03 ,7.611033E-03 ,1.486750E-02 ,2.439914E-02 ,9.910212E-02 ,1.324318E-01 ,5.680477E-02],
[4.811503E-02 ,1.316859E-06 ,9.998946E-01 ,9.999998E-01 ,2.262097E-01 ,3.038370E-01 ,3.113294E-01 ,2.589197E-01 ,1.004414E-01 ,1.056161E-01 ,5.143396E-02 ,2.692954E-02 ,1.501996E-02 ,1.145428E-02 ,7.714508E-03 ,7.295355E-03 ,7.035836E-03 ,9.380516E-03 ,1.374103E-02 ,1.763005E-02 ,3.223939E-02 ,1.058401E-01 ,2.190657E-01],
[2.315064E-01 ,9.999998E-01 ,1.000000E+00 ,3.976035E-01 ,3.511818E-01 ,3.110107E-01 ,2.560140E-01 ,2.011396E-01 ,1.440040E-01 ,6.384920E-02 ,3.754904E-02 ,1.873565E-02 ,9.138994E-03 ,6.923441E-03 ,6.139806E-03 ,7.119574E-03 ,1.147013E-02 ,1.337538E-02 ,2.015983E-02 ,2.298819E-02 ,3.824712E-02 ,5.104336E-02 ,6.372990E-02],
[1.520477E-01 ,3.941643E-01 ,9.999995E-01 ,2.549550E-01 ,3.507926E-01 ,2.562574E-01 ,2.967342E-01 ,1.813510E-01 ,8.181080E-02 ,5.262663E-02 ,2.108007E-02 ,1.105146E-02 ,5.132747E-03 ,4.267386E-03 ,4.921128E-03 ,7.758457E-03 ,1.119283E-02 ,1.623947E-02 ,2.003566E-02 ,2.417301E-02 ,3.204582E-02 ,6.156165E-02 ,8.703971E-02],
[9.999806E-01 ,2.229024E-01 ,2.097481E-01 ,3.425576E-01 ,3.357603E-01 ,3.571073E-01 ,2.623062E-01 ,1.747261E-01 ,8.173429E-02 ,3.783672E-02 ,1.319607E-02 ,5.824002E-03 ,3.221795E-03 ,2.983762E-03 ,6.134922E-03 ,1.031702E-02 ,1.594617E-02 ,1.894208E-02 ,2.183186E-02 ,2.552664E-02 ,3.370131E-02 ,4.178537E-02 ,4.319259E-02],
[1.188227E-01 ,1.693883E-01 ,2.050159E-01 ,3.765801E-01 ,3.111804E-01 ,3.435898E-01 ,2.168332E-01 ,1.557358E-01 ,7.127563E-02 ,3.153591E-02 ,7.232967E-03 ,5.769410E-03 ,3.540134E-03 ,9.323137E-03 ,9.771148E-03 ,1.633594E-02 ,1.679835E-02 ,1.362341E-02 ,1.554774E-02 ,1.910684E-02 ,1.942391E-02 ,2.539373E-02 ,2.689875E-02],
[7.953756E-02 ,2.084131E-01 ,4.067048E-01 ,3.143800E-01 ,3.883147E-01 ,3.485941E-01 ,2.424966E-01 ,1.241288E-01 ,5.853164E-02 ,1.140851E-02 ,7.973596E-03 ,4.858697E-03 ,8.676366E-03 ,2.079359E-02 ,1.764085E-02 ,2.378165E-02 ,1.579918E-02 ,1.646993E-02 ,1.326953E-02 ,1.452023E-02 ,1.792177E-02 ,2.341843E-02 ,4.555934E-02],
[6.991055E-01 ,3.431516E-01 ,2.973329E-01 ,3.899907E-01 ,3.630690E-01 ,3.627387E-01 ,2.255813E-01 ,1.039838E-01 ,3.253331E-02 ,1.715993E-02 ,6.381830E-03 ,4.510319E-03 ,5.587352E-03 ,1.889430E-02 ,2.253135E-02 ,1.850364E-02 ,1.501270E-02 ,1.213490E-02 ,9.564474E-03 ,8.998736E-03 ,9.964770E-03 ,1.570497E-02 ,3.067989E-02]
]])

score=np.array([[
[1.000002E-01 ,1.001508E-01 ,1.740157E+00 ,1.906048E+00 ,1.343252E+00 ,7.845002E-01 ,6.295567E-01 ,6.159815E-01 ,6.023734E-01 ,5.755312E-01 ,5.622913E-01 ,5.231654E-01 ,5.199111E-01 ,4.773329E-01 ,3.829695E-01 ,3.611604E-01 ,3.409316E-01 ,2.867681E-01 ,2.646788E-01 ,2.385046E-01 ,2.235049E-01 ,2.209371E-01 ,1.142874E-01],
[1.008754E-01 ,1.437583E+00 ,1.143276E+00 ,9.609976E-01 ,6.751465E-01 ,5.279219E-01 ,5.245336E-01 ,5.021961E-01 ,4.779665E-01 ,4.192752E-01 ,3.977532E-01 ,4.017117E-01 ,3.756379E-01 ,3.619197E-01 ,3.163162E-01 ,2.725374E-01 ,2.464785E-01 ,2.493133E-01 ,2.224354E-01 ,2.134992E-01 ,1.629788E-01 ,1.953101E-01 ,1.436389E-01],
[1.000002E-01 ,1.002526E+00 ,7.451184E-01 ,4.820350E-01 ,5.184000E-01 ,4.725515E-01 ,4.654586E-01 ,4.238411E-01 ,3.760667E-01 ,3.593924E-01 ,3.577648E-01 ,3.788233E-01 ,3.671521E-01 ,3.375459E-01 ,2.862908E-01 ,2.486977E-01 ,2.191065E-01 ,2.219465E-01 ,2.112381E-01 ,2.047478E-01 ,1.809568E-01 ,1.855444E-01 ,1.863652E-01],
[9.310893E-01 ,7.499148E-01 ,5.351188E-01 ,5.350493E-01 ,4.818897E-01 ,4.104957E-01 ,4.044504E-01 ,3.765547E-01 ,3.371627E-01 ,3.356273E-01 ,3.531885E-01 ,3.821926E-01 ,3.722095E-01 ,3.409641E-01 ,2.802455E-01 ,2.434338E-01 ,2.223378E-01 ,2.079023E-01 ,2.014684E-01 ,1.984566E-01 ,1.885913E-01 ,1.884457E-01 ,1.845605E-01],
[6.156983E-01 ,4.617560E-01 ,3.533531E-01 ,4.410674E-01 ,4.267733E-01 ,3.863592E-01 ,3.720740E-01 ,3.424796E-01 ,3.197513E-01 ,3.283685E-01 ,3.566955E-01 ,3.750531E-01 ,3.770922E-01 ,3.466769E-01 ,2.876223E-01 ,2.413932E-01 ,2.150387E-01 ,2.051315E-01 ,1.989039E-01 ,1.944899E-01 ,1.859148E-01 ,1.865022E-01 ,1.898123E-01],
[3.290434E-01 ,3.873620E-01 ,3.897379E-01 ,4.443978E-01 ,3.961234E-01 ,3.776393E-01 ,3.504113E-01 ,3.221003E-01 ,3.068918E-01 ,3.258054E-01 ,3.507051E-01 ,3.681275E-01 ,3.714125E-01 ,3.484648E-01 ,2.943415E-01 ,2.401978E-01 ,2.200945E-01 ,2.067881E-01 ,1.998830E-01 ,1.937311E-01 ,1.895008E-01 ,1.895409E-01 ,1.880817E-01],
[3.573423E-01 ,3.961558E-01 ,4.066133E-01 ,3.687563E-01 ,3.720326E-01 ,3.497929E-01 ,3.279644E-01 ,3.061311E-01 ,2.994179E-01 ,3.333589E-01 ,3.599733E-01 ,3.766623E-01 ,3.843202E-01 ,3.466610E-01 ,2.973096E-01 ,2.440949E-01 ,2.206611E-01 ,2.087936E-01 ,1.993346E-01 ,1.957354E-01 ,1.912196E-01 ,1.894191E-01 ,1.853052E-01],
[4.832142E-01 ,3.868867E-01 ,3.877238E-01 ,3.623482E-01 ,3.573270E-01 ,3.360604E-01 ,3.142149E-01 ,2.931477E-01 ,2.926210E-01 ,3.186932E-01 ,3.371931E-01 ,3.575366E-01 ,3.577892E-01 ,3.329978E-01 ,2.861230E-01 ,2.428781E-01 ,2.247494E-01 ,2.107822E-01 ,2.018263E-01 ,1.980035E-01 ,1.947506E-01 ,1.966149E-01 ,1.927895E-01]
],[
[1.336678E-01 ,1.000000E-01 ,1.000010E-01 ,1.745397E+00 ,9.533102E-01 ,3.598774E-01 ,4.014987E-01 ,4.519691E-01 ,5.890577E-01 ,5.361758E-01 ,5.671896E-01 ,5.077128E-01 ,3.805308E-01 ,3.019575E-01 ,2.567131E-01 ,2.163396E-01 ,2.013491E-01 ,2.009850E-01 ,1.922277E-01 ,1.914236E-01 ,1.709770E-01 ,1.669772E-01 ,1.784529E-01],
[1.253681E-01 ,1.133232E+00 ,1.000057E-01 ,3.991481E-01 ,3.367523E-01 ,3.256995E-01 ,3.437505E-01 ,4.062079E-01 ,4.737398E-01 ,4.271702E-01 ,4.068290E-01 ,3.649098E-01 ,3.232161E-01 ,3.013283E-01 ,2.667509E-01 ,2.351737E-01 ,2.092033E-01 ,2.037550E-01 ,2.018631E-01 ,2.017154E-01 ,1.992240E-01 ,1.842393E-01 ,1.685879E-01],
[1.100119E-01 ,8.998458E-01 ,1.111350E+00 ,2.875399E-01 ,2.741016E-01 ,3.203481E-01 ,3.380007E-01 ,3.670270E-01 ,3.606688E-01 ,3.511822E-01 ,3.177693E-01 ,3.125902E-01 ,3.046915E-01 ,2.966998E-01 ,2.676585E-01 ,2.348532E-01 ,2.148599E-01 ,2.119849E-01 ,2.050651E-01 ,2.078945E-01 ,2.061775E-01 ,2.085542E-01 ,2.090528E-01],
[1.315057E-01 ,5.126288E-01 ,3.421047E-01 ,3.186421E-01 ,2.920627E-01 ,3.069754E-01 ,3.030377E-01 ,3.257816E-01 ,3.247408E-01 ,2.916085E-01 ,2.878928E-01 ,2.880664E-01 ,2.931258E-01 ,2.845071E-01 ,2.657675E-01 ,2.362889E-01 ,2.242892E-01 ,2.186561E-01 ,2.150101E-01 ,2.151262E-01 ,2.154067E-01 ,2.117445E-01 ,2.108720E-01],
[4.221002E-01 ,3.302622E-01 ,3.211434E-01 ,2.903915E-01 ,2.785150E-01 ,2.832816E-01 ,2.890427E-01 ,2.868046E-01 ,2.859733E-01 ,2.722553E-01 ,2.774927E-01 ,2.830271E-01 ,2.881612E-01 ,2.801467E-01 ,2.654497E-01 ,2.390669E-01 ,2.300154E-01 ,2.279630E-01 ,2.263267E-01 ,2.259443E-01 ,2.230419E-01 ,2.248400E-01 ,2.258522E-01],
[3.718831E-01 ,2.644688E-01 ,3.023080E-01 ,2.741401E-01 ,2.731159E-01 ,2.726408E-01 ,2.727574E-01 ,2.624975E-01 ,2.597702E-01 ,2.534164E-01 ,2.677121E-01 ,2.817079E-01 ,2.845508E-01 ,2.950371E-01 ,2.722618E-01 ,2.574585E-01 ,2.525070E-01 ,2.391968E-01 ,2.394632E-01 ,2.389677E-01 ,2.395648E-01 ,2.385239E-01 ,2.397566E-01],
[2.470994E-01 ,2.537302E-01 ,2.415579E-01 ,2.782907E-01 ,2.612262E-01 ,2.602656E-01 ,2.525236E-01 ,2.544050E-01 ,2.459664E-01 ,2.580195E-01 ,2.600893E-01 ,2.803350E-01 ,3.016934E-01 ,3.125214E-01 ,2.950187E-01 ,2.799720E-01 ,2.624121E-01 ,2.577723E-01 ,2.477455E-01 ,2.489727E-01 ,2.480591E-01 ,2.476370E-01 ,2.443618E-01],
[2.958328E-01 ,2.390295E-01 ,2.611337E-01 ,2.582361E-01 ,2.582409E-01 ,2.440104E-01 ,2.392464E-01 ,2.431303E-01 ,2.480012E-01 ,2.538908E-01 ,2.620779E-01 ,2.758257E-01 ,2.917656E-01 ,3.100123E-01 ,3.022631E-01 ,2.938398E-01 ,2.827561E-01 ,2.719573E-01 ,2.638446E-01 ,2.560044E-01 ,2.565220E-01 ,2.546451E-01 ,2.519720E-01]
]])

stail=np.array([[
[1.566856E+00 ,1.960362E+00 ,1.855893E+00 ,1.630700E+00 ,1.301352E+00 ,1.615529E+00 ,1.373487E+00 ,1.819679E+00 ,1.105251E+00 ,2.090501E+00 ,2.152806E+00 ,2.886737E+00 ,1.536304E+00 ,4.666038E+00 ,2.310112E+00 ,4.018444E+00 ,3.957117E+00 ,2.283114E+00 ,2.162184E+00 ,1.579848E+00 ,5.249705E-01 ,1.647637E+00 ,2.889838E-01],
[1.351120E+00 ,1.358607E+00 ,1.318889E+00 ,1.046511E+00 ,1.506798E+00 ,9.831700E-01 ,1.172811E+00 ,1.297131E+00 ,1.439241E+00 ,1.347740E+00 ,1.689101E+00 ,1.863527E+00 ,3.093024E+00 ,3.152145E+00 ,2.838190E+00 ,2.350176E+00 ,1.744384E+00 ,1.679746E+00 ,1.261524E+00 ,9.812266E-01 ,4.207738E-01 ,5.138716E-01 ,2.468751E-01],
[9.860036E-01 ,9.855335E-01 ,1.076149E+00 ,7.521709E-01 ,9.547400E-01 ,8.611088E-01 ,1.056175E+00 ,1.059678E+00 ,1.056127E+00 ,1.255545E+00 ,1.528206E+00 ,1.581697E+00 ,2.504874E+00 ,2.578830E+00 ,2.316417E+00 ,1.571178E+00 ,9.954386E-01 ,1.166877E+00 ,1.024001E+00 ,8.618268E-01 ,5.523506E-01 ,4.861233E-01 ,4.144635E-01],
[6.471146E-01 ,1.974626E+00 ,8.031988E-01 ,1.016149E+00 ,8.921109E-01 ,7.776043E-01 ,9.202601E-01 ,9.725803E-01 ,9.600434E-01 ,1.164609E+00 ,1.400496E+00 ,1.600618E+00 ,1.804008E+00 ,1.651529E+00 ,1.559696E+00 ,1.173321E+00 ,9.373227E-01 ,9.182326E-01 ,8.978256E-01 ,8.611162E-01 ,7.192095E-01 ,6.129536E-01 ,4.810107E-01],
[1.150456E+00 ,6.757596E-01 ,6.489924E-01 ,7.161900E-01 ,7.512913E-01 ,7.591233E-01 ,8.532639E-01 ,8.998805E-01 ,9.158055E-01 ,1.062049E+00 ,1.111204E+00 ,1.494440E+00 ,1.234897E+00 ,1.278735E+00 ,1.246632E+00 ,9.819074E-01 ,7.672643E-01 ,8.323775E-01 ,8.559886E-01 ,8.340719E-01 ,7.470025E-01 ,6.965694E-01 ,6.299353E-01],
[6.143798E-01 ,6.103375E-01 ,6.042362E-01 ,7.739519E-01 ,7.371473E-01 ,7.984815E-01 ,8.510966E-01 ,8.810450E-01 ,1.004086E+00 ,1.021416E+00 ,1.217847E+00 ,1.390241E+00 ,1.189531E+00 ,9.989365E-01 ,1.029775E+00 ,8.917853E-01 ,8.192130E-01 ,8.520381E-01 ,8.822520E-01 ,8.283992E-01 ,7.890673E-01 ,7.805208E-01 ,6.950439E-01],
[5.893119E-01 ,6.025615E-01 ,6.775566E-01 ,6.262300E-01 ,6.918482E-01 ,7.507727E-01 ,8.139721E-01 ,8.881151E-01 ,9.993626E-01 ,9.230831E-01 ,1.081542E+00 ,1.129810E+00 ,9.460134E-01 ,1.121016E+00 ,1.007867E+00 ,9.119070E-01 ,7.398144E-01 ,7.808396E-01 ,7.819036E-01 ,7.620651E-01 ,6.974309E-01 ,6.664894E-01 ,5.691545E-01],
[1.409466E-01 ,6.086395E-01 ,6.246989E-01 ,6.184681E-01 ,6.549260E-01 ,7.183083E-01 ,8.358468E-01 ,9.947273E-01 ,1.121783E+00 ,9.435146E-01 ,1.132790E+00 ,1.078443E+00 ,8.365216E-01 ,9.259003E-01 ,1.038595E+00 ,1.023046E+00 ,9.352663E-01 ,9.375862E-01 ,9.326056E-01 ,8.853720E-01 ,8.403497E-01 ,8.526791E-01 ,6.884716E-01]
],[
[9.429801E-01 ,1.352552E+00 ,1.730394E+00 ,1.579012E+00 ,9.533281E-01 ,1.043770E+00 ,9.832186E-01 ,1.026355E+00 ,1.589179E+00 ,1.218302E+00 ,1.783990E+00 ,2.013394E+00 ,2.150680E+00 ,2.253525E+00 ,2.540854E+00 ,2.230882E+00 ,2.266991E+00 ,2.178726E+00 ,1.632638E+00 ,1.276357E+00 ,6.658894E-01 ,5.832320E-01 ,8.334889E-01],
[1.113263E+00 ,1.132064E+00 ,1.353738E+00 ,1.091854E+00 ,9.022119E-01 ,7.739923E-01 ,7.916852E-01 ,8.866382E-01 ,1.134947E+00 ,1.143882E+00 ,1.482140E+00 ,1.791677E+00 ,2.121639E+00 ,2.317225E+00 ,2.506904E+00 ,2.340266E+00 ,2.196305E+00 ,1.955613E+00 ,1.635993E+00 ,1.440386E+00 ,1.079522E+00 ,6.500261E-01 ,4.787336E-01],
[5.686073E-01 ,8.444816E-01 ,9.192901E-01 ,8.334427E-01 ,6.776958E-01 ,7.119473E-01 ,7.664495E-01 ,8.385169E-01 ,8.957312E-01 ,1.087988E+00 ,1.245059E+00 ,1.560151E+00 ,2.013279E+00 ,2.329237E+00 ,2.287982E+00 ,2.035093E+00 ,1.674015E+00 ,1.579719E+00 ,1.344019E+00 ,1.235464E+00 ,9.696389E-01 ,8.278432E-01 ,7.357950E-01],
[7.712685E-01 ,8.735157E-01 ,7.934783E-01 ,7.824256E-01 ,6.475391E-01 ,6.998147E-01 ,6.955532E-01 ,7.611528E-01 ,9.018216E-01 ,9.498640E-01 ,1.210293E+00 ,1.526961E+00 ,2.093182E+00 ,2.255043E+00 ,2.094982E+00 ,1.732301E+00 ,1.585196E+00 ,1.382730E+00 ,1.279162E+00 ,1.162252E+00 ,1.007223E+00 ,7.468756E-01 ,6.286897E-01],
[6.719990E-01 ,7.097167E-01 ,8.055874E-01 ,6.532260E-01 ,6.269238E-01 ,6.318499E-01 ,6.601031E-01 ,6.915959E-01 ,7.827154E-01 ,9.274393E-01 ,1.250735E+00 ,1.657434E+00 ,2.117219E+00 ,2.194244E+00 ,1.750321E+00 ,1.458067E+00 ,1.284773E+00 ,1.207321E+00 ,1.139191E+00 ,1.056516E+00 ,9.347588E-01 ,8.280502E-01 ,7.985799E-01],
[8.540418E-01 ,6.107106E-01 ,6.746364E-01 ,6.210619E-01 ,6.178191E-01 ,6.102973E-01 ,6.320621E-01 ,6.429079E-01 ,7.345461E-01 ,8.541945E-01 ,1.335897E+00 ,1.554451E+00 ,1.878307E+00 ,1.527575E+00 ,1.459354E+00 ,1.274666E+00 ,1.265317E+00 ,1.287375E+00 ,1.203016E+00 ,1.090977E+00 ,1.065600E+00 ,9.348637E-01 ,8.923913E-01],
[6.952269E-01 ,5.146222E-01 ,5.301617E-01 ,6.089573E-01 ,5.813013E-01 ,5.764378E-01 ,5.761557E-01 ,6.238067E-01 ,7.019187E-01 ,1.100706E+00 ,1.214654E+00 ,1.601696E+00 ,1.461779E+00 ,1.194521E+00 ,1.237985E+00 ,1.125165E+00 ,1.221468E+00 ,1.170567E+00 ,1.183727E+00 ,1.111390E+00 ,1.007321E+00 ,8.780012E-01 ,6.563381E-01],
[2.052212E-01 ,4.570523E-01 ,5.620799E-01 ,5.721830E-01 ,5.731143E-01 ,5.369000E-01 ,5.400059E-01 ,5.921267E-01 ,7.430093E-01 ,9.337837E-01 ,1.295647E+00 ,1.539034E+00 ,1.606053E+00 ,1.235576E+00 ,1.185068E+00 ,1.263137E+00 ,1.285330E+00 ,1.291945E+00 ,1.321062E+00 ,1.260209E+00 ,1.173592E+00 ,9.681073E-01 ,7.257960E-01]
]])


err=np.array([[
[1.622691777534782887 , 2.077704658731818199 , 3.035260576754808426 , 0.500000000000000000 , 0.500000000000000000 , 1.410334008745849133 , 1.213296045549213886 , 1.146343844942748547 , 1.189089625142514706 , 1.292042694054543972 , 1.237123626284301281 , 1.199897465296089649 , 1.061172834597527981 , 1.145214288495481014 , 0.930699841119349003 , 0.931294637732207775 , 0.855681234039366245 , 0.792636401019990444 , 0.714035834185779095 , 0.569068948738276958 , 0.536098825745284557 , 0.483918809331953526 , 0.885994001291692257],
[1.400751757435500622 , 3.078026797622442245 , 0.500000000000000000 , 1.256171363405883312 , 1.035338795743882656 , 0.914101158268749714 , 0.875953362323343754 , 0.862136521376669407 , 0.864830420352518559 , 0.806674084626138210 , 0.767447522841393948 , 0.747725437395274639 , 0.715067991055548191 , 0.674720584414899349 , 0.637843846343457699 , 0.600239935331046581 , 0.584480724297463894 , 0.601944445632398129 , 0.555752876214683056 , 0.485112252645194530 , 0.403347269631922245 , 0.359084199182689190 , 0.327824202366173267],
[1.098932954482734203 , 1.113691954873502254 , 1.024111394770443439 , 0.884865584783256054 , 0.810984143055975437 , 0.779150382615625858 , 0.764144605956971645 , 0.735055821947753429 , 0.691425980068743229 , 0.629713843576610088 , 0.611963030882179737 , 0.597174989990890026 , 0.588684420101344585 , 0.563266907818615437 , 0.524343232624232769 , 0.494173419661819935 , 0.477505036629736423 , 0.521750143729150295 , 0.527723993174731731 , 0.467157251201570034 , 0.397779378108680248 , 0.350115529261529446 , 0.321646534837782383],
[0.878217703662812710 , 0.876260817982256413 , 0.792121508158743382 , 0.750158975832164288 , 0.715867620892822742 , 0.707622391171753407 , 0.693492251448333263 , 0.652349860407412052 , 0.597558860667049885 , 0.564202328212559223 , 0.550740270875394344 , 0.557480718009173870 , 0.548676521517336369 , 0.522238087840378284 , 0.475259968079626560 , 0.445304880850017071 , 0.453631655313074589 , 0.493716887198388577 , 0.528335190378129482 , 0.511543591506779194 , 0.452111228369176388 , 0.382786716334521770 , 0.330859656445682049],
[0.739448609761893749 , 0.713841340504586697 , 0.701558182947337627 , 0.686349886469542980 , 0.666152956895530224 , 0.655326570384204388 , 0.636633212678134441 , 0.590682505629956722 , 0.544271330349147320 , 0.519228770397603512 , 0.521432285197079182 , 0.532966363243758678 , 0.529251466505229473 , 0.501603121869266033 , 0.451845540665090084 , 0.421862942166626453 , 0.420536442659795284 , 0.464811134152114391 , 0.503951775841414928 , 0.505439418368041515 , 0.470048547722399235 , 0.416914558969438076 , 0.367024413309991360],
[0.617361041717231274 , 0.637577430345118046 , 0.647125049494206905 , 0.650241068564355373 , 0.634388999082148075 , 0.616008195094764233 , 0.588894906453788280 , 0.547076712362468243 , 0.510111843235790730 , 0.493989932350814342 , 0.508148976601660252 , 0.521249503828585148 , 0.521445292048156261 , 0.492933820001780987 , 0.449506747536361217 , 0.412548155523836613 , 0.423542276956140995 , 0.463276392780244350 , 0.501679551787674427 , 0.501439691521227360 , 0.485120846889913082 , 0.447683283127844334 , 0.404526812024414539],
[0.561624736525118351 , 0.615202742628753185 , 0.622925360687077045 , 0.618100753985345364 , 0.599806611426174641 , 0.578687067143619061 , 0.550136276520788670 , 0.510971766896545887 , 0.483786094002425671 , 0.485490246675908566 , 0.505459521897137165 , 0.521217457018792629 , 0.524409006349742413 , 0.489936581812798977 , 0.443468934856355190 , 0.399625523947179317 , 0.389858852140605450 , 0.416526584886014462 , 0.436090149916708469 , 0.435891575179994106 , 0.417638358660042286 , 0.397560539655387402 , 0.366280022077262402],
[0.543048604391515255 , 0.602534669451415539 , 0.594376401044428349 , 0.580261575989425182 , 0.559618818573653698 , 0.534376741386950016 , 0.503831195645034313 , 0.472130886279046535 , 0.457030146382749081 , 0.468173106200993061 , 0.486648834310472012 , 0.505001808516681194 , 0.508826700039207935 , 0.485877645201981068 , 0.444938142783939838 , 0.416592980735003948 , 0.425634295679628849 , 0.447542258538305759 , 0.459906957112252712 , 0.447529084049165249 , 0.425997941754758358 , 0.411220177076756954 , 0.374005307443439960],
],[
[0.710447764955461025 , 1.401829921640455723 , 1.791519260965287685 , 0.500000000000000000 , 1.266075770370662212 , 0.963545181788504124 , 0.875724873505532742 , 0.902147772721946239 , 0.989396688528358936 , 1.074380395002663136 , 1.188109242357313633 , 1.239722047932446003 , 1.204829576425254345 , 1.195626071654260159 , 1.015289670787751675 , 0.967710112221539021 , 0.863407841883599758 , 0.783937108702957630 , 0.619832239113748074 , 0.502448924817144871 , 0.438014146871864796 , 0.464610676281154156 , 0.437402856536209583],
[0.857201968319714069 , 1.170362754724919796 , 1.403051191009581089 , 1.194921770133078098 , 0.830067328177392483 , 0.724786664359271526 , 0.736763955093920231 , 0.784905505366623402 , 0.831110022030770779 , 0.839569428004324436 , 0.859411654062569141 , 0.855745879001915455 , 0.852538791485130787 , 0.883488434366881847 , 0.827947120182216167 , 0.810889669694006443 , 0.718738866038620472 , 0.677486159838736057 , 0.613109125755727291 , 0.533004705794155598 , 0.446287489496171474 , 0.390044652856886387 , 0.388284825719892979],
[0.678806380368769169 , 0.913967299275100231 , 1.090550580061972141 , 0.812962383963167667 , 0.661008163355290890 , 0.658612907864153385 , 0.675204013474285603 , 0.702520635910332203 , 0.692174085415899754 , 0.675414350815117359 , 0.658629818819463253 , 0.653687146492302418 , 0.653009072877466679 , 0.667919944040477276 , 0.637593249790370464 , 0.606011535041034222 , 0.588167170993983746 , 0.557462408207356930 , 0.524801728315651417 , 0.475435811094939709 , 0.417442128993570805 , 0.381022741086781025 , 0.365596137009561062],
[0.649640765972435474 , 0.680503928102552891 , 0.774923230521380901 , 0.653478502295911312 , 0.602901373989880085 , 0.614937846548855305 , 0.628147828392684460 , 0.625608033500611782 , 0.600873771123588085 , 0.564832317642867565 , 0.546556287445127964 , 0.545275704003870487 , 0.551528961397707462 , 0.549540244974195957 , 0.549188232980668545 , 0.520446212030947208 , 0.496764161624014378 , 0.469086793251335621 , 0.454650581814348698 , 0.429766415618360043 , 0.397030645050108433 , 0.365068632178008556 , 0.334819805808365345],
[0.655493757687509060 , 0.523613438941538334 , 0.602169620804488659 , 0.586620503105223179 , 0.575508919544517994 , 0.586904189549386501 , 0.583077092655003071 , 0.563512182794511318 , 0.530233263038098812 , 0.496408008970320225 , 0.489188243634998798 , 0.493798972107470036 , 0.501257331110537052 , 0.503301768563687801 , 0.496748452074825764 , 0.469093375839293003 , 0.442576055414974689 , 0.419255676679313183 , 0.399146455340087414 , 0.381289131008088589 , 0.365428167395293713 , 0.346741921268403530 , 0.325293810106813908],
[0.487617141567170620 , 0.427256471477448940 , 0.515486345626413822 , 0.548421780578792095 , 0.555545748211443424 , 0.558728803880512714 , 0.541478839702904224 , 0.512840949930250645 , 0.480271474458277225 , 0.454629284329712391 , 0.454808195121586323 , 0.464870425872504711 , 0.476091421209275723 , 0.482294014655053616 , 0.476190577261149883 , 0.452898048795759678 , 0.427634497173130512 , 0.403055350296199322 , 0.387121445499360561 , 0.368555842898786068 , 0.359037299640476704 , 0.339812350459396839 , 0.325890242122113705],
[0.361482043750584126 , 0.387100894935429096 , 0.468336814083158970 , 0.515665366314351559 , 0.533516571857035160 , 0.529939823783934116 , 0.505243725143373013 , 0.475416607223451138 , 0.443205605261027813 , 0.428403316996991634 , 0.427679344080388546 , 0.444645105861127377 , 0.467116699554026127 , 0.469860308803617954 , 0.465820225887000561 , 0.445836353115737438 , 0.419744868762791157 , 0.398211774416267872 , 0.379193433560431004 , 0.365760751999914646 , 0.349976268596947193 , 0.337768762372434139 , 0.322015778161585331],
[0.338877084665000439 , 0.369253537617623806 , 0.444835164584219456 , 0.502584767527878284 , 0.515252799727022648 , 0.501308116130530834 , 0.469647443853318691 , 0.440912266261875629 , 0.418023924343287945 , 0.409489381127059460 , 0.420264911837875843 , 0.439020396210253239 , 0.462220181711018085 , 0.480506199412047863 , 0.482798959128558636 , 0.460790975950658321 , 0.439457022584974766 , 0.416782532818615437 , 0.397429903037846088 , 0.381216975860297680 , 0.364832679741084576 , 0.349666181020438671 , 0.331978979520499706],
]])




# ebins are energy bins (23 with log spacing) to determine which value to use from the above arrays
ebins=np.array([1.000000E+01 ,1.778279E+01 ,3.162278E+01 ,5.623413E+01 ,1.000000E+02 ,1.778279E+02 ,3.162278E+02 ,5.623413E+02 ,1.000000E+03 ,1.778279E+03 ,3.162278E+03 ,5.623413E+03 ,1.000000E+04 ,1.778279E+04 ,3.162278E+04 ,5.623413E+04 ,1.000000E+05 ,1.778279E+05 ,3.162278E+05 ,5.623413E+05 ,1.000000E+06 ,1.778279E+06 ,3.162278E+06])
# tbins are bins of cos(inclination angle), the angle from boresight
tbins=np.array([3.000000E-01 ,4.000000E-01 ,5.000000E-01 ,6.000000E-01 ,7.000000E-01 ,8.000000E-01 ,9.000000E-01 ,1.000000E+00])
# input energies, cos(inc) are digitized with numpy.digitize

#now we need to define functions that will calculate the psf
# P(δv; E, θ)
#δv is the angular separation between the reconstructed direction and the true direction
#E is the photon energy
#θ is the angle between the reconstructed direction and the LAT boresight

#energy dependence is scaled out with x=δv/Sp(E)
# Sp(E) depends on parameters provided in the LAT Cicerone:
# http://fermi.gsfc.nasa.gov/ssc/data/analysis/documentation/Cicerone/Cicerone_LAT_IRFs/IRF_PSF.html


B=0.8
c0 = np.array([6.38e-2, 1.23e-1])
c1 = np.array([1.26e-3,2.22e-3])

def S_p(E,con):
    #if E<20 or E > 3.162278E+06:
    #    raise ValueError('Something went wrong. Invalid energy value. Fermi operates between 20 MeV and 3.1 TeV.')
    #if con < 0 or con > 1:
    #    raise ValueError('Something went wrong. Conversion must be 0 [Front] or 1 [Back].')
    # Determine scale parameters
    first=c0[con]*(E/100.0)**(-B)
    sec=(first**2+c1[con]**2)**(0.5)
    return sec

def xdef(theta,E,con):
    #theta must be in radians
    dv=theta
    sp=S_p(E,con)
    return dv/sp

def king(x,sig,gam):
    pref=(1-1/gam)/(2*np.pi*(sig**2))
    body=(1+1/(2*gam)*(x/sig)**2)

    return pref*body**(-gam)


def twokings(x,sc,st,gc,gt,nt):
    #first compute fcore normalization term
    fc=1/(1+nt*(st/sc)**2)
    #now we calculate the two king function terms
    first=fc*king(x,sc,gc)
    second=(1-fc)*king(x,st,gt)
    return first+second

# now we pull everything together with the psf function

def psf(e,theta,acos,con):
    # Use numpy.digitize to put energy/inclination in proper bin
    eb=np.digitize(e,ebins)
    tb=np.digitize(acos,tbins)
    # Find core/tail gamma, sigma, n from predefined vectors
    sc=score[con,tb,eb]
    st=stail[con,tb,eb]
    gc=gcore[con,tb,eb]
    gt=gtail[con,tb,eb]
    nt=ntail[con,tb,eb]
    # convert theta into the scaled deviation, x
    x=xdef(theta,e,con)
    # want psf in terms of probability per square degree, so need to convert sigmas from x to degrees
    sp=S_p(e,con)

    #core king function
    prefc=(1-1/gc)/(2*np.pi*(np.degrees(sc*sp)**2))
    bodyc=(1+1/(2*gc)*(x/sc)**2)**(-gc)

    #tail king function
    preft=(1-1/gt)/(2*np.pi*(np.degrees(st*sp)**2))
    bodyt=(1+1/(2*gt)*(x/st)**2)**(-gt)

    #normalization of the two
    fc=1/(1+nt*(st/sc)**2)

    #combine

    return fc*prefc*bodyc+(1-fc)*preft*bodyt



    # Put these parameters into the twokings function
    #return twokings(x,sc,st,gc,gt,nt)


def psfint(e,theta,acos,con):
    #tb is int that runs from 0 to 7
    eb=np.digitize(e,ebins)
    tb=np.digitize(acos,tbins)
    #get core/tail gamma, sigma, and n parameters
    sc=score[con,tb,eb]
    st=stail[con,tb,eb]
    gc=gcore[con,tb,eb]
    gt=gtail[con,tb,eb]
    nt=ntail[con,tb,eb]
    #convert theta into scaled deviation, x
    x=xdef(theta,e,con)
    #define core, fc
    fc=1/(1+nt*(st/sc)**2)
    # write integrated king functions for core and tail
    kc=(1+1/(2*gc)*(x/sc)**2)**(1-gc)
    kt=(1+1/(2*gt)*(x/st)**2)**(1-gt)
    result=1-fc*kc+(fc-1)*kt
    return result

def xint(x,eb,tb,con):
    #input energy bin, theta bin, and upper integration bound
    #returns integral
    #eb runs from 0 to 23, tb from 0 to 7
    #con is 0 or 1
    sc=score[con,tb,eb]
    st=stail[con,tb,eb]
    gc=gcore[con,tb,eb]
    gt=gtail[con,tb,eb]
    nt=ntail[con,tb,eb]
    fc=1/(1+nt*(st/sc)**2)
    # write integrated king functions for core and tail
    kc=(1+1/(2*gc)*(x/sc)**2)**(1-gc)
    kt=(1+1/(2*gt)*(x/st)**2)**(1-gt)
    result=1-fc*kc+(fc-1)*kt
    return result


def onesig(eb,tb,con):
    #get one sigma integration for given bins
    #the one sigma will be given in terms of x
    x0=0
    x1=1
    mid=(x0+x1)*0.5

    final=1-np.e**(-0.5)


    n=0
    while n<30:
        i0=xint(x0,eb,tb,con)
        i1=xint(x1,eb,tb,con)


        if i1<final:

            dif=x1-x0
            x0+=dif
            x1+=dif
            i0=xint(x0,eb,tb,con)
            i1=xint(x1,eb,tb,con)

        if i0<final<i1:

            mid=(x0+x1)*0.5
            imid=xint(mid,eb,tb,con)

            if imid<final:
                x0=mid


            if imid>final:
                x1=mid

        n+=1

    if xint(mid,eb,tb,con) < final-0.1:
        print eb,tb,con


    return mid

'''
#this commented block will create an array of one-sigma bounds for the psf
#as this has already been computed, the resulting array is entered above as 'err'
arraysig=np.zeros(np.shape(gtail))
con=0
while con<2:
    tb=0
    while tb<8:
        eb=0
        while eb<23:
            arraysig[con,tb,eb]=onesig(eb,tb,con)
            eb+=1
        tb+=1
    con+=1
#arraysig now contains the one-sigma radius of the psf for all energy,theta,con bins
#it does break down for some small energies (less than 100 MeV, which will not matter for analysis as we cut all photons below 100 MeV)

'''

def geterr(e,acos,con):
    #returns effective one-sigma error radius in radians (converts err array to radians, conversion is energy dependent)
    eb=np.digitize(e,ebins)
    tb=np.digitize(acos,tbins)

    rad=err[con,tb,eb]
    sp=S_p(e,con)

    return rad*sp





def getvals(e,acos,con):
    # Use numpy.digitize to put energy/inclination in proper bin
    eb=np.digitize(e,ebins)
    tb=np.digitize(acos,tbins)
    # Find core/tail gamma, sigma, n from predefined vectors
    sc=score[con,tb,eb]
    st=stail[con,tb,eb]
    gc=gcore[con,tb,eb]
    gt=gtail[con,tb,eb]
    nt=ntail[con,tb,eb]
    fc=1/(1+nt*(st/sc)**2)

    return sc,st,gc,gt,fc

def getsig(e,acos,con):
    eb=np.digitize(e,ebins)
    tb=np.digitize(acos,tbins)
    sc=score[con,tb,eb]
    sp=S_p(e,con)
    return np.degrees(sc*sp)


#now we define other useful functions for the fermi analysis

def tsep(ictime,phtime,closeone,sep,sameness=False):
    #time separation function
    #input mjd for IceCube and Fermi events, outputs indices of time pairs
    #sameness lets this search for coincidences within one stream
    n=0
    m=0
    ccc=0
    pdone=len(ictime)
    start=0
    stop=len(phtime)
    while n<pdone:
        m=start
        first=0
        while m<stop and (phtime[m]-ictime[n])<(sep):
            if abs(ictime[n]-phtime[m])<sep:
                first=1
                if sameness==False:
                    closeone[ccc,0]=m
                    closeone[ccc,1]=n
                    ccc+=1
                if sameness==True:
                    if m<n:
                        closeone[ccc,0]=m
                        closeone[ccc,1]=n
                        ccc+=1
                    elif n<m:
                        closeone[ccc,0]=n
                        closeone[ccc,1]=m
                        ccc+=1

            if first==0:
                start=m
            m+=1
        n+=1
    return closeone[0:ccc,:]

def numul(nutime,nura,nudec):
    #given neutrino time, ra, dec, returns a list where
    #each element is a list of all neutrinos forming a multiplet
    #Multiplicity can be arbitrarily high, but rarely exceeds 3

    base=np.zeros((len(nutime)*100,2),dtype=long)
    evil=tsep(nutime,nutime,base,1/86.4,sameness=True)
    dsts=distsph(nura[evil[:,0]],nudec[evil[:,0]],nura[evil[:,1]],nudec[evil[:,1]])

    good=evil[np.where(dsts<np.radians(5))]

    unu,nuind=np.unique(good[:,0],return_index=True)
    junk=[]
    higher=[]
    counter=0
    while counter<len(unu):

        nu=unu[counter]
        b=np.argwhere(good[:,0]==nu)
        inds=np.unique(good[b[:,0],1])

        #now check for higher multiplicities
        #first we push all doublets into list
        ccq=0
        while ccq<len(inds):
            junk.append([nu,inds[ccq]]) #each doublet

            ccq+=1

        if len(inds)>1: #pull all multiplicities higher than 2
            higher.append(nu)
        counter+=1


    #now loop through the list of multiplicities higher than 2
    #itteratively get all higher multiplicities
    mul=2
    while len(higher)>0:
        aaq=0
        newlist=[]
        while aaq<len(higher):
            nu=higher[aaq]
            b=np.argwhere(good[:,0]==nu)
            inds=np.unique(good[b[:,0],1])
            combs=list(combinations(inds,mul))
            #combs is a list of combinations of the indices
            # we then need to see if each combination exists
            # in the list of lower-multiplicity indices
            ccq=0
            while ccq<len(combs):
                testval=list(combs[ccq])
                if testval in junk:
                    bbq=0
                    templist=[nu]
                    while bbq<len(testval):
                        templist.append(testval[bbq])
                        bbq+=1
                        if templist not in junk:
                            junk.append(templist)
                ccq+=1
            if len(inds)>mul:
                newlist.append(nu)
            aaq+=1
            #print aaq
        mul+=1
        higher=newlist
    return junk #return list of all multi-neutrino coincidences


def stirling(n):
    #stirling's approx for log(n!)
    #second term makes it accurate even for small n
    return n*np.log(n)-n+0.5*np.log(2*np.pi*n)

def distsph(lng1,lat1,lng2,lat2):
    #calculate great circle distance between points (inputs must be radians)
    inside=np.sin(lat1)*np.sin(lat2)+np.cos(lat1)*np.cos(lat2)*np.cos(lng1-lng2)
    #safety in case inside is less than/greater than 1
    inside=np.clip(inside,-1,1)
    hahaha=np.arccos(inside)
    return hahaha

def spang(ra1,dec1,ra2,dec2):
    #find angle between two points on sphere
    #inputs must be in radians
    a=np.pi/2-dec2 #distance of point 2 from north pole
    b=np.pi/2-dec1 #distance of point 1 from norht pole
    c=distsph(ra1,dec1,ra2,dec2) #distance between the two points


    top=np.cos(a)-np.cos(b)*np.cos(c)
    bot=np.sin(b)*np.sin(c)

    #safety in event that bot=0 (one particle at pole or both at same place)
    a=np.argwhere(bot==0)
    if type(a)==type(bot):
        bot[a]=1
    else:
        if bot==0:
            bot=1

    frac=top/bot
    #now add a safety if the angle should be 0 or 180
    #due to round off, the value of frac can be slightly larger than 1, causing an error

    frac=np.clip(frac,-1,1)

    ang=np.arccos(frac)

    test=ra2-ra1

    a=np.argwhere(test<0)
    #safety for input of an array vs input of a float/int
    if type(a)==type(test):
        ang[a]=-ang[a]
    else:
        if test<0:
            ang=-ang


    return ang,c

def berring(ra,dec,dst,ang):
    #given a starting point, an angle (clockwise from north pole) and a distance
    #this will give you your endpoint on a globe

    a=np.sin(dec)*np.cos(dst)+np.cos(dec)*np.sin(dst)*np.cos(ang)
    dec2=np.arcsin(a)

    a=np.sin(ang)*np.sin(dst)*np.cos(dec)
    b=np.cos(dst)-np.sin(dec)*np.sin(dec2)
    ra2=ra+np.arctan2(a,b)

    return ra2%(2*np.pi),dec2 #need final RA to be between 0,2pi

def icpsf(theta,sigma):
    #gaussian psf for icecube neutrinos
    g=np.exp(-((theta)**2)/(2*(np.radians(sigma))**2))
    a=2*np.pi*(sigma**2)
    return g/a

def mkmap(RA,DEC,N):
    Nside = 2**N
    ra = RA #np.radians(RA)
    dec = -1*DEC + np.pi/2
    #dec=np.clip(dec,1,np.pi)
    inds = hp.ang2pix(Nside, dec.astype(float), ra.astype(float))
    return inds

def intem(lon1,lat1,lon2,lat2,dp):
    #find point distance dp from lat1,lon1
    #angles are measured in radians
    d=distsph(lon1,lat1,lon2,lat2)
    if d==0:
        return lon1,lat1
    else:
        f=dp/d
        A=np.sin((1-f)*d)/np.sin(d)
        B=np.sin(f*d)/np.sin(d)
        x = A*np.cos(lat1)*np.cos(lon1)+B*np.cos(lat2)*np.cos(lon2)
        y = A*np.cos(lat1)*np.sin(lon1)+B*np.cos(lat2)*np.sin(lon2)
        z = A*np.sin(lat1)+B*np.sin(lat2)
        lat=np.arctan2(z,np.sqrt(x**2+y**2))
        lon=np.arctan2(y,x)
        if lon<0:
            lon+=2*np.pi
        #print lon1,lat1,lon2,lat2,dp
        return lon,lat

#create antares PSFs

trackdata=np.loadtxt(os.path.join(dpath,"data/fermi_lat",'trackpsfhist.txt')) #import the data
binval=trackdata[:,0]/0.4234567
bincenter=10**trackdata[:,1] #location of bin center
psfinterp=interpolate.interp1d(bincenter,binval,fill_value='extrapolate')
def trackpsf(theta):
    return psfinterp(theta)



def getgrid(centerx,centery,extent,count,nuerr,x,y,e,acos,c):
    #input center coords, extent, point density, and list of photon parameters
    #returns x/y grids and grid of distances/psf values
    #psf grid is given in log space to avoid underflows (happens for grb case, makes psf zero everywhere)
    temp=np.linspace(-extent,extent,count)
    #make grid centered at neutrino
    xg,yg=np.meshgrid(temp+centerx,temp+centery,sparse=True)

    #create holder for coordinate grid
    zholder=np.zeros((len(x)+1,count,count))
    #same for psf results
    rholder=np.zeros((len(x)+1,count,count))

    #last pane of grid holds neutrino data
    zholder[-1]=np.hypot(xg,yg)
    rholder[-1]=icpsf(zholder[-1],nuerr)

    n=0
    while n<len(x):
        zholder[n]=np.hypot(xg-x[n],yg-y[n]) #photon distances
        rholder[n]=psf(e[n],zholder[n],acos[n],c[n])  #photon psf
        n+=1
    return xg,yg,np.log(rholder),zholder #can get divide by zero errors, do not affect code

def getgridtrack(centerx,centery,extent,count,nux,nuy,x,y,e,acos,c):
    #centerx,centery tell center of grid we will create
    #extent tells how far it goes, while count tells how many points there are in each direction

    temp=np.linspace(-extent,extent,count)
    #for single neutrino, nu is at origin
    #for multi-neutrino, average neutrino position is the origin

    xg,yg=np.meshgrid(temp+centerx,temp+centery,sparse=True)

    zholderph=np.zeros((len(x),count,count)) #grid to hold photon distances
    rholderph=np.zeros((len(x),count,count)) #grid to hold photon psf results

    zholdernu=np.zeros((len(nux),count,count)) #grid to hold neutrino distances
    rholdernu=np.zeros((len(nux),count,count)) #grid to hold neutrino psf results

    #now loop through each pane to fill in the grid
    n=0
    while n<len(x):
        zholderph[n]=np.hypot(xg-x[n],yg-y[n]) #photon distance
        rholderph[n]=psf(e[n],zholderph[n],acos[n],c[n]) #photon psf
        n+=1
    m=0
    while m<len(nux):
        zholdernu[m]=np.hypot(xg-nux[m],yg-nuy[m]) #neutrino distance
        rholdernu[m]=trackpsf(np.degrees(zholdernu[m])) #neutrino psf
        m+=1

    return xg,yg,np.log(rholderph),np.log(rholdernu),zholderph,zholdernu



ebin=np.logspace(np.log10(100),np.log10(300000),4)

def getlam(rholderph,rholdernu,ra,dec,nutime,nuprob,phtime,xg1,yg1,energy,acos,phbkg):
    #input photon and neutrino psf grids, grid center coordinates, ph/nu times, and background map parameters
    #returns lambda value given psf grid and neutrino coordinates
    #also returns value of psf for each photon at coincidence location
    gridfinalph=np.sum(rholderph,axis=0)
    gridfinalnu=np.sum(rholdernu,axis=0)
    gridfinal=gridfinalph+gridfinalnu

    mx1=np.argmax(gridfinal)
    i1=mx1//len(gridfinal)
    i2=mx1%len(gridfinal)
    #check to see if we are near the edge of the grid
    if i1<10 or i1>len(gridfinal)-10:
        edge=1
    elif i2<10 or i2>len(gridfinal)-10:
        edge=1
    else:
        edge=0

    cx1=xg1[0,i2]
    cy1=yg1[i1,0]
    vals=rholderph[:,i1,i2] #log psf values of each photon
    psfa=gridfinal[i1,i2] #value of log of psf product
    #now calculate 1-sigma error radius to coincidence

    space=(np.max(yg1)-np.min(yg1))/(len(yg1)-1)

    offset=1
    difholder=np.zeros(4)
    while np.min(difholder)==0:
        if i1+offset<len(gridfinal):
            up1=gridfinal[i1+offset,i2]
            if up1-psfa<(-0.5) and difholder[0]==0:
                difholder[0]=offset
        else:
            difholder[0]=1000

        if i1-offset>0:
            down1=gridfinal[i1-offset,i2]
            if down1-psfa<(-0.5) and difholder[1]==0:
                difholder[1]=offset
        else:
            difholder[1]=1000

        if i2+offset<len(gridfinal):
            up2=gridfinal[i1,i2+offset]
            if up2-psfa<(-0.5) and difholder[2]==0:
                difholder[2]=offset
        else:
            difholder[2]=1000

        if i2-offset>0:
            down2=gridfinal[i1,i2-offset]
            if down2-psfa<(-0.5) and difholder[3]==0:
                difholder[3]=offset
        else:
            difholder[3]=1000
        offset+=1


    griderr=space*np.average(difholder[np.where(difholder<1000)])

    #get coordinates
    #convert coordinates to ra/dec
    dst=np.hypot(cx1,cy1)
    ang=np.arctan2(cx1,cy1)
    ra,dec=berring(ra,dec,dst,ang) #coincidence location
    nph=len(vals) #number of photons
    nnu=len(rholdernu) #number of neutrinos

    timetotal=np.concatenate((phtime,nutime))
    tavg=np.average(timetotal) #central time of coincidence
    deltat=np.max(timetotal)-np.min(timetotal) #temporal width of coincidence
    sigmat=np.std(timetotal) #error on average timestamp




    nutdif=np.clip(a=abs(tavg-nutime),a_min=1/864.0,a_max=None) #time term difference
    phtdif=np.clip(a=abs(tavg-phtime),a_min=1/864.0,a_max=None)

    nutterm=np.log(1/(nutdif*864))
    phtterm=np.log(1/(phtdif*864))

    hpind=mkmap(ra,dec,8)
    eb=np.digitize(energy,ebin)-1
    tb=np.digitize(acos,[0.5,1])

    bkgval=np.log(phbkg[tb,eb,hpind])

    lam=2*(psfa+stirling(nnu)+stirling(nph)-np.sum(bkgval)+np.sum(nutterm)+np.sum(phtterm))+np.sum(np.log(nuprob/(1-nuprob)))
    return lam,vals,ra,dec,griderr,tavg,deltat,sigmat,edge,cx1,cy1


raw=np.loadtxt(os.path.join(dpath,"data/fermi_lat",'lambinhist.txt'))
bins=raw[:,0]
vals=raw[:,1]
sila=interpolate.interp1d(bins,(1-vals),fill_value='extrapolate')
normer=float(sila(11.7075))#one per year threshold
def lam2prob(lam):
    #this will take a lambda and return an event rate in events above that lambda per second
    return sila(lam)/(normer*31556952) #larger lambda means smaller frequency
